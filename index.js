//#region imports
const { Telegraf, Markup, Telegram, Scenes, session } = require('telegraf');
const { telegrafThrottler } = require('telegraf-throttler');
require('dotenv').config();
const bot = new Telegraf(process.env.TOKEN)
const throttler = telegrafThrottler();
bot.use(throttler);
const telegram = new Telegram(process.env.TOKEN)
const SETTINGS = require('./settings.json')
const STUDIOS = require('./studios.json')

const { createCanvas, loadImage } = require('canvas')
const fs = require('fs');

const util = require('./modules/util.js');
//#endregion

//#region Redis
// --------------------------------------------------------------------------
// 1. Redis, sessions
// --------------------------------------------------------------------------
const RedisSession = require('telegraf-session-redis-upd')
const sessionInstance = new RedisSession();
const SESSIONS = require('./modules/sessions.js');
const { default: axios } = require('axios');
bot.use(
  SESSIONS.GLOBAL_SESSION,
  SESSIONS.CHANNELS_SESSION,
  SESSIONS.USER_SESSION,
  SESSIONS.CHAT_SESSION
)
//#endregion



const replyToTheMessage = (ctx, message, replyToID) => {
  ctx.replyWithHTML(message, {
    reply_to_message_id: replyToID
  }).catch((error) => {
    console.log("Error! Couldn't reply to a message, just sending a message. Reason:")
    console.log(error)
    ctx.replyWithHTML(message)
  })
}

//#region Register Scenes, Init Stage
const stage = new Scenes.Stage([
  require('./modules/lots/scenes/photo'),
  require('./modules/lots/scenes/price'),
  require('./modules/lots/scenes/link'),
  require('./modules/lots/scenes/author'),
  require('./modules/lots/scenes/name'),
  //
  require('./modules/emporium/scenes/type'),
  require('./modules/emporium/scenes/classes'),
  require('./modules/emporium/scenes/races'),
  require('./modules/emporium/scenes/releaseName'),
  require('./modules/emporium/scenes/sex'),
  require('./modules/emporium/scenes/studioName'),
  require('./modules/emporium/scenes/weapons'),
  require('./modules/emporium/scenes/photo'),
  require('./modules/emporium/scenes/photoExact'),
  require('./modules/emporium/scenes/whFactions'),
  require('./modules/emporium/scenes/whType'),
]);
bot.use(session());
bot.use(stage.middleware());

bot.use(require('./modules/lots'))
bot.use(require('./modules/polls'))
bot.use(require('./modules/commands'))
bot.use(require('./modules/emporium'))
//#endregion

bot.hears(/(^[–≥–ì]–æ–±–ª–∏–Ω[!.]?$)/g, (ctx) => {
  replyToTheMessage(ctx, `–°–ª—É—à–∞—é, –≥–æ—Å–ø–æ–¥–∏–Ω${ctx.message.from.first_name && ' ' + ctx.message.from.first_name}! –ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏, —á—Ç–æ —è —É–º–µ—é - –Ω–∞–ø–∏—à–∏ "–ì–æ–±–ª–∏–Ω, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"`, ctx.message.message_id)
})

bot.hears(/(^[–≥–ì]–æ–±–ª–∏–Ω[,]? –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\??$)/g, (ctx) => {
  replyToTheMessage(ctx, `–ï—Å–ª–∏ –≤–∞–º –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –º–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ :)`, ctx.message.message_id)
})

bot.hears(/(^[–≥–ì]–æ–±–ª–∏–Ω[,]? —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?\??$)/g, (ctx) => {
  replyToTheMessage(ctx, `–°–µ–π—á–∞—Å —è —É–º–µ—é –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö! –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è "–ì–æ–±–ª–∏–Ω, —Å–∫–æ–ª—å–∫–æ 5 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª—è—Ö?"`, ctx.message.message_id)
})

bot.hears(/^[–≥–ì]–æ–±–ª–∏–Ω[,]? —Å–∫–æ–ª—å–∫–æ \$?([0-9]*[.])?[0-9]+ (–¥–æ–ª–ª–∞—Ä(–æ–≤|–∞) |–±–∞–∫—Å(–æ–≤|–∞) | )?–≤ [–∞-—è–ê-–Ø]+\??$/g, (ctx) => {
  let amount = ctx.message.text.split('—Å–∫–æ–ª—å–∫–æ ')[1].split(' ')[0];
  if (amount.indexOf('$') > -1) amount = amount.split('$')[1];
  amount = parseFloat(amount);

  let newCurrency = ctx.message.text.split(' –≤ ')[1];
  if (newCurrency.indexOf('?') > -1) newCurrency = newCurrency.split('?')[0];

  if (newCurrency == '—Ä—É–±–ª—è—Ö' || newCurrency == '–∫–æ–ø–µ–π–∫–∞—Ö' || newCurrency == '–¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö' || newCurrency == '–¥–µ—Ä–µ–≤—è–Ω—ã—Ö') {
    let newValue = Math.ceil(amount * SETTINGS.EXCHANGE_RATE * SETTINGS.SPECIAL_RATE);
    let word = '—Ä—É–±.'
    if (newCurrency == '–∫–æ–ø–µ–π–∫–∞—Ö') {
      newValue = Math.ceil(amount * SETTINGS.EXCHANGE_RATE * SETTINGS.SPECIAL_RATE * 100);
      word = '–∫–æ–ø.'
    }

    replyToTheMessage(ctx, `–¢—ç–∫—Å, –Ω—É, –ø–æ–ª—É—á–∞–µ—Ç—Å—è, $${amount} —ç—Ç–æ ${newValue} ${word}!`, ctx.message.message_id)
  } else {
    replyToTheMessage(ctx, `–ß–µ–≥–æ? –ö–∞–∫–∏–µ ${newCurrency}? –Ø–∂ –Ω–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –≤–∞–ª—é—Ç—ã!`, ctx.message.message_id)
  }
})

bot.command('rch', ctx => {
  ctx.channelsSession = {};
  ctx.channelsSession.channels = {};
  ctx.reply('done');
})

bot.command('shch', async ctx => {
  console.log(JSON.stringify(ctx.channelsSession))
})

bot.on('channel_post', async (ctx) => {
  if (!ctx.channelPost.document && (typeof ctx.channelPost.text !== undefined || typeof ctx.channelPost.caption !== undefined)) {
    let localChannels;
    await sessionInstance.getSession('channelsSession').then(session => {
      localChannels = session;
    });
    if (!localChannels) {
      localChannels = {};
    }
    if (!localChannels.channels) {
      console.log('defining channels')
      localChannels.channels = {};
    }

    const channelID = ctx.channelPost.chat.id;
    const messageText = ctx.channelPost.text || ctx.channelPost.caption;

    if (!localChannels.channels[channelID]) {
      if (messageText === 'start') {
        localChannels.channels[channelID] = {
          indexers: [],
          studios: [],
          locked: false,
          type: 'archive'
        };
        ctx.replyWithHTML('–ë–∏–ø –±—É–ø, –∑–∞–ø–∏—Å–∞–ª –∫–∞–Ω–∞–ª. –ü—Ä–∏—Å—ã–ª–∞–π –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä—ã \n\n–ü—Ä–∏—à–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 1 —ç–º–æ–¥–∑–∏ "üî∏" - —è –∑–∞–ø–æ–º–Ω—é –µ–≥–æ –∫–∞–∫ –ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä. \n\n<i>–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–∏—Å–ª–∞—Ç—å –º–∏–Ω–∏–º—É–º <b>2</b> —Ç–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è</i>')
      }
      sessionInstance.saveSession('channelsSession', localChannels);
    } else if (messageText === 'stop') {
      ctx.replyWithHTML('üñê –ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä—ã –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ')
      localChannels.channels[channelID].locked = true;
      sessionInstance.saveSession('channelsSession', localChannels);
    } else if (messageText === 'start') {
      ctx.replyWithHTML('ü§ñ –ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä—ã –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ')
      localChannels.channels[channelID].locked = false;
      sessionInstance.saveSession('channelsSession', localChannels);
    } else if (messageText === 'switch') {
      if (localChannels.channels[channelID].type === 'collection') {
        localChannels.channels[channelID].type = 'archive';
        ctx.replyWithHTML('–†–µ–∂–∏–º - –∞—Ä—Ö–∏–≤ –ë–ì')
      } else if (localChannels.channels[channelID].type === 'archive') {
        localChannels.channels[channelID].type = 'collection';
        ctx.replyWithHTML('–†–µ–∂–∏–º - –∫–æ–ª–ª–µ–∫—Ü–∏—è')
      }
      sessionInstance.saveSession('channelsSession', localChannels);
    } else if (!localChannels.channels[channelID].locked) {
      if (!localChannels.channels[channelID].type) localChannels.channels[channelID].type = 'archive';
      if (messageText.indexOf('üî∏') < 0) {
        if (localChannels.channels[channelID].indexers.length === 0) {
          ctx.replyWithHTML('–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞! \n\n–ü—Ä–∏—à–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 1 —ç–º–æ–¥–∑–∏ "üî∏" - —è –∑–∞–ø–æ–º–Ω—é –µ–≥–æ –∫–∞–∫ –ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä. \n\n<i>–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–∏—Å–ª–∞—Ç—å –º–∏–Ω–∏–º—É–º <b>2</b> —Ç–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è</i>');
        } else {
          let studioName = '';
          let monthName = messageText.split('\n')[0]?.split(' (')[1]?.split(' ')[0] || '–ø—ã–ø—ã';
          let year = messageText.split('\n')[0]?.split(' (')[1]?.split(' ')[1]?.split(')')[0] || '2222';
          const months = {
            '—è–Ω–≤–∞—Ä—å': '01',
            '—Ñ–µ–≤—Ä–∞–ª—å': '02',
            '–º–∞—Ä—Ç': '03',
            '–∞–ø—Ä–µ–ª—å': '04',
            '–º–∞–π': '05',
            '–∏—é–Ω—å': '06',
            '–∏—é–ª—å': '07',
            '–∞–≤–≥—É—Å—Ç': '08',
            '—Å–µ–Ω—Ç—è–±—Ä—å': '09',
            '–æ–∫—Ç—è–±—Ä—å': '10',
            '–Ω–æ—è–±—Ä—å': '11',
            '–¥–µ–∫–∞–±—Ä—å': '12',
            '–ø—ã–ø—ã': '88'
          }
          let releaseName = '';
          if (messageText.indexOf('\n') > 0) {
            studioName = messageText.split('\n')[0].split(' (')[0];
            if (year == '2222' || months[monthName] == '88') {
              releaseName = `${messageText.split('\n')[1]}`;
            } else {
              releaseName = `${year}${months[monthName]} - ${messageText.split('\n')[1]}`;
            }
          } else {
            studioName = messageText.split(' (')[0];
            releaseName = `${year}${months[monthName]}`;
          }

          let copy = localChannels.channels[channelID].studios;
          const newPostInfo = {
            name: studioName,
            release: releaseName,
            messageID: ctx.channelPost.message_id
          }
          copy.push(newPostInfo)
          copy.sort((a, b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0));

          let newText = ``;
          if (copy.length < 100) {
            newText = `üî∏ <b>–ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä 1</b>üî∏\n\n`
            copy.forEach(st => {
              if (localChannels.channels[channelID].type === 'archive') newText += `<a href="https://t.me/c/${channelID.toString().split('-100')[1]}/${st.messageID}">${st.name} - ${st.release}</a>\n`
              if (localChannels.channels[channelID].type === 'collection') newText += `<a href="https://t.me/c/${channelID.toString().split('-100')[1]}/${st.messageID}">${st.release}</a>\n`
            });
          }

          try {
            telegram.editMessageText(channelID, localChannels.channels[channelID].indexers[0].messageID, undefined, newText, {
              parse_mode: "HTML"
            })
          } catch (e) {
            console.log(e)
          }

        }
      } else {
        const numberOfIndexer = localChannels.channels[channelID].indexers.length + 1;
        const defaultText = `üî∏ <b>–ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä ${numberOfIndexer}</b>üî∏\n\n<i>–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥—É—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–ª–∏–∑—ã!</i>`;
        localChannels.channels[channelID].indexers.push({
          messageID: ctx.channelPost.message_id
        })
        await telegram.editMessageText(channelID, ctx.channelPost.message_id, undefined, defaultText, {
          parse_mode: "HTML"
        })
        await telegram.pinChatMessage(channelID, ctx.channelPost.message_id);
      }

      sessionInstance.saveSession('channelsSession', localChannels);
    }
  }
})

bot.catch((error) => {
  console.log(error);
})

// --------------------------------------------------------------------------
// 4. Service
// --------------------------------------------------------------------------
bot.launch()
// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
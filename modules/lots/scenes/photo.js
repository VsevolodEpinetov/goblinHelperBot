const { Scenes, Markup } = require("telegraf");
const lotsUtils = require('../utils');
const util = require('../../util');
const SETTINGS = require('../../../settings.json')

const lotScenePhotoStage = new Scenes.BaseScene('LOT_SCENE_PHOTO_STAGE');

// Helper function to send the initial message in the photo stage
async function sendInitialPhotoMessage(ctx) {
  const sentMessage = await ctx.replyWithHTML(
    `–õ–æ—Ç—ã - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ª–æ—Ç—ã - —ç—Ç–æ —á—É–¥–µ—Å–Ω–æ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø—Ä–µ–≤—å—é—à–∫–∏ –¥–ª—è –ª–æ—Ç–∞. –õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10 –∫–∞—Ä—Ç–∏–Ω–æ–∫. \n\n<b>–≠—Ç–∞–ø:</b> üñº –∫–∞—Ä—Ç–∏–Ω–∫–∏\n<b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</b> 0/10\n\n‚ö†Ô∏è<i><b>–í–ê–ñ–ù–û:</b> –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ –æ–¥–Ω–æ–π —à—Ç—É–∫–µ, –∏–Ω–∞—á–µ –≤—Å—ë –≤–∑–æ—Ä–≤—ë—Ç—Å—è!</i>`,
    {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        Markup.button.callback(SETTINGS.BUTTONS.CREATE_LOT.CANCEL, 'actionStopLot')
      ])
    }
  );

  // Store the chatID and messageID in the session for future reference
  ctx.session.lot.chatID = sentMessage.chat.id;
  ctx.session.lot.messageID = sentMessage.message_id;
}

// Helper function to update the photo stage message with the current number of photos
async function updatePhotoMessage(ctx) {
  const photoCount = ctx.session.lot.photos.length;

  await lotsUtils.updateLotCreationMessage(ctx,
    `–õ–æ—Ç—ã - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ª–æ—Ç—ã - —ç—Ç–æ —á—É–¥–µ—Å–Ω–æ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø—Ä–µ–≤—å—é—à–∫–∏ –¥–ª—è –ª–æ—Ç–∞. –õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10 –∫–∞—Ä—Ç–∏–Ω–æ–∫. \n\n<b>–≠—Ç–∞–ø:</b> üñº –∫–∞—Ä—Ç–∏–Ω–∫–∏\n<b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</b> ${photoCount}/10`,
    [
      Markup.button.callback(SETTINGS.BUTTONS.CREATE_LOT.CANCEL, 'actionStopLot'),
      ...(photoCount > 0 ? [Markup.button.callback(`üëç –≠—Ç–∏—Ö —Ö–≤–∞—Ç–∏—Ç (${photoCount})`, 'finishPhotoUpload')] : [])
    ]
  )
}

lotScenePhotoStage.enter(async (ctx) => {
  lotsUtils.initializeLotSession(ctx);
  await sendInitialPhotoMessage(ctx);
});

lotScenePhotoStage.on('photo', async (ctx) => {
  ctx.session.lot.photos.push(ctx.message.photo[ctx.message.photo.length - 1].file_id);
  await ctx.deleteMessage(ctx.message.message_id);
  await updatePhotoMessage(ctx);

  // Automatically move to the next stage if 10 photos are uploaded
  if (ctx.session.lot.photos.length >= 10) {
    return ctx.scene.enter('LOT_SCENE_PRICE_STAGE');
  }
});

lotScenePhotoStage.on('text', async (ctx) => {
  await ctx.deleteMessage(ctx.message.message_id);

  const photoCount = ctx.session.lot.photos.length;
  await lotsUtils.updateLotCreationMessage(ctx,
    `‚ö†Ô∏è <b>–û–∂–∏–¥–∞—é –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∞ –Ω–µ —Ç–µ–∫—Å—Ç! –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç–æ –Ω–∞–∂–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É!</b>‚ö†Ô∏è\n\n<b>–≠—Ç–∞–ø:</b> üñº –∫–∞—Ä—Ç–∏–Ω–∫–∏\n<b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</b> ${photoCount}/10`,
    [
      Markup.button.callback(SETTINGS.BUTTONS.CREATE_LOT.CANCEL, 'actionStopLot'),
      ...(photoCount > 0 ? [Markup.button.callback(`üëç –≠—Ç–∏—Ö —Ö–≤–∞—Ç–∏—Ç (${photoCount})`, 'finishPhotoUpload')] : [])
    ]
  );
});

lotScenePhotoStage.on('document', async (ctx) => {
  await ctx.deleteMessage(ctx.message.message_id);

  const photoCount = ctx.session.lot.photos.length;
  await lotsUtils.updateLotCreationMessage(ctx,
    `‚ö†Ô∏è <b>–¢—ã –ø—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç, –∞ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É! –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞—Ä—Ç–∏–Ω–∫—É</b>‚ö†Ô∏è\n\n<blockquote>–ß—Ç–æ–±—ã –ø—Ä–∏—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤ —Ç–µ–ª–µ–≥—É –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥—Ä–∞–º —Å–∂–∞–ª –µ—ë</blockquote>\n\n<b>–≠—Ç–∞–ø:</b> üñº –∫–∞—Ä—Ç–∏–Ω–∫–∏\n<b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</b> ${photoCount}/10`,
    [
      Markup.button.callback(SETTINGS.BUTTONS.CREATE_LOT.CANCEL, 'actionStopLot'),
      ...(photoCount > 0 ? [Markup.button.callback(`üëç –≠—Ç–∏—Ö —Ö–≤–∞—Ç–∏—Ç (${photoCount})`, 'finishPhotoUpload')] : [])
    ]
  );
});

lotScenePhotoStage.action('finishPhotoUpload', async (ctx) => {
  return ctx.scene.enter('LOT_SCENE_PRICE_STAGE');
});

lotScenePhotoStage.action('actionStopLot', (ctx) => {
  if (ctx.callbackQuery.from.id == ctx.session.lot.whoCreated.id) {
    ctx.deleteMessage(ctx.callbackQuery.message.message_id)
    ctx.session.lot = null;
  }
})

module.exports = lotScenePhotoStage;
 
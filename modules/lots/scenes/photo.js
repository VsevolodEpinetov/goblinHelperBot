const { Scenes, Markup } = require("telegraf");
const SETTINGS = require('../../../settings.json');
const util = require('../../util.js')

const lotScenePhotoStage = new Scenes.BaseScene('LOT_SCENE_PHOTO_STAGE');

lotScenePhotoStage.enter(async (ctx) => {
  try {
    if (!ctx.globalSession.lots) ctx.globalSession.lots = [];
    ctx.session.lot = SETTINGS.EMPTY_LOT;
    ctx.session.lot.photos = [];
    await ctx.replyWithHTML(`–õ–æ—Ç—ã - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ª–æ—Ç—ã - —ç—Ç–æ —á—É–¥–µ—Å–Ω–æ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø—Ä–µ–≤—å—é—à–∫–∏ –¥–ª—è –ª–æ—Ç–∞. –õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10 –∫–∞—Ä—Ç–∏–Ω–æ–∫. \n\n<b>–≠—Ç–∞–ø:</b> üñº –∫–∞—Ä—Ç–∏–Ω–∫–∏\n<b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</b> 0/10\n\n‚ö†Ô∏è<i><b>–í–ê–ñ–ù–û:</b> –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ –æ–¥–Ω–æ–π —à—Ç—É–∫–µ, –∏–Ω–∞—á–µ –≤—Å—ë –≤–∑–æ—Ä–≤—ë—Ç—Å—è!</i>`, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        Markup.button.callback(SETTINGS.BUTTONS.CREATE_LOT.CANCEL, 'actionStopLot')
      ]),
      message_thread_id: SETTINGS.TOPICS.GOBLIN.LOTS
    }).then(nctx => {
      ctx.session.lot.lastMessage.bot = nctx.message_id;
    })
  } catch (e) {
    console.error('Failed to enter photo scene:', e);
  }
});

lotScenePhotoStage.on('photo', async (ctx) => {
  try {
    ctx.session.lot.photos.push(ctx.message.photo[ctx.message.photo.length - 1].file_id);
    try {
      if (ctx.session.lot.lastMessage.bot) await ctx.deleteMessage(ctx.session.lot.lastMessage.bot);
    }
    catch (e) {
      console.log(e)
    }
    await ctx.replyWithHTML(`–î–æ–±–∞–≤–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É!\n\n<b>–≠—Ç–∞–ø:</b> üñº –∫–∞—Ä—Ç–∏–Ω–∫–∏\n<b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</b> ${ctx.session.lot.photos.length}/10\n\n‚ö†Ô∏è<i><b>–í–ê–ñ–ù–û:</b> –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ –æ–¥–Ω–æ–π —à—Ç—É–∫–µ, –∏–Ω–∞—á–µ –≤—Å—ë –≤–∑–æ—Ä–≤—ë—Ç—Å—è!</i>`, {
      parse_mode: 'HTML',
      reply_to_message_id: ctx.message.message_id,
      ...Markup.inlineKeyboard([
        Markup.button.callback(SETTINGS.BUTTONS.CREATE_LOT.CANCEL, 'actionStopLot'),
        Markup.button.callback(`üëç –≠—Ç–∏—Ö —Ö–≤–∞—Ç–∏—Ç (${ctx.session.lot.photos.length})`, 'finishPhotoUpload')
      ]),
      message_thread_id: SETTINGS.TOPICS.GOBLIN.LOTS
    }).then(nctx => {
      ctx.session.lot.lastMessage.bot = nctx.message_id;
    });
  } catch (e) {
    console.error('Failed to handle photo message:', e);
  }
})

lotScenePhotoStage.on('document', async (ctx) => {
  try {
    await ctx.replyWithHTML(SETTINGS.MESSAGES.CREATE_LOT.ERRORS.NOT_A_PHOTO, {
      reply_to_message_id: ctx.message.message_id,
      message_thread_id: SETTINGS.TOPICS.GOBLIN.LOTS
    })
  } catch (e) {
    console.error('Failed to handle document message:', e);
  }
})

lotScenePhotoStage.on('message', async (ctx) => {
  try {
    await ctx.replyWithHTML(SETTINGS.MESSAGES.CREATE_LOT.ERRORS.WAITING_FOR_A_PHOTO, {
      parse_mode: 'HTML',
      reply_to_message_id: ctx.message.message_id,
      ...Markup.inlineKeyboard([
        Markup.button.callback(SETTINGS.BUTTONS.CREATE_LOT.CANCEL, 'actionStopLot')
      ]),
      message_thread_id: SETTINGS.TOPICS.GOBLIN.LOTS
    })
  } catch (e) {
    console.error('Failed to handle non-photo message:', e);
  }
})

lotScenePhotoStage.action('finishPhotoUpload', async (ctx) => {
  try {
    ctx.session.lot = {
      ...ctx.session.lot,
      whoCreated: ctx.callbackQuery.from
    }
    if (ctx.session.lot.photos.length > 0) {
      try {
        if (ctx.session.lot.lastMessage.bot) await ctx.deleteMessage(ctx.session.lot.lastMessage.bot);
      } catch (e) {
        console.error('Failed to delete message:', e);
      }
      await ctx.scene.enter('LOT_SCENE_PRICE_STAGE');
    } else {
      await ctx.replyWithHTML(SETTINGS.MESSAGES.CREATE_LOT.ERRORS.NO_PHOTOS_UPLOADED);
    }
  } catch (e) {
    console.error('Failed to finish photo upload:', e);
  }
});

lotScenePhotoStage.command('exit', (ctx) => {
  ctx.scene.leave();
})

lotScenePhotoStage.action('actionStopLot', async (ctx) => {
  try {
    util.log(ctx)
    if (ctx.session.lot) {
      await ctx.replyWithHTML(`üëå`, {
        message_thread_id: SETTINGS.TOPICS.GOBLIN.LOTS
      });
      try {
        if (ctx.session.lot.lastMessage.bot) await ctx.deleteMessage(ctx.session.lot.lastMessage.bot);
      } catch (e) {
        console.error('Failed to delete message:', e);
      }
      ctx.session.lot = null;
      await ctx.scene.leave();
    } else {
      await ctx.answerCbQuery(SETTINGS.MESSAGES.CREATE_LOT.ERRORS.NOT_CREATING_A_LOT)
    }
  } catch (e) {
    console.error('Failed to handle stop lot action:', e);
  }
})

lotScenePhotoStage.leave(async (ctx) => { });

module.exports = lotScenePhotoStage;

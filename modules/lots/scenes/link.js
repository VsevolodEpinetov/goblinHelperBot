const { Scenes, Markup } = require("telegraf");
const SETTINGS = require('../../../settings.json');
const util = require('../../util.js')

const lotSceneLinkStage = new Scenes.BaseScene('LOT_SCENE_LINK_STAGE');

lotSceneLinkStage.enter(async (ctx) => {
  try {
    await ctx.replyWithHTML(`–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞ –∑–∞–ø–∏—Å–∞–ª, —Å–ø–∞—Å–∏–±–æ! –ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ. –ú–æ–∂–Ω–æ —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –±—É–¥–µ—Ç\n\n<b>–≠—Ç–∞–ø:</b> ‚úçÔ∏è –æ–ø–∏—Å–∞–Ω–∏–µ\n\n‚ÑπÔ∏è <i><b>–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b> –∫—Ä–∞—Ç–∫–æ—Å—Ç—å - —Å–µ—Å—Ç—Ä–∞ —Ç–∞–ª–∞–Ω—Ç–∞! –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —Ç–æ –≤—Å—ë –º–æ–∂–µ—Ç –≤–∑–æ—Ä–≤–∞—Ç—å—Å—è</i>`, {
      reply_to_message_id: ctx.session.lot.lastMessage.user,
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        Markup.button.callback(SETTINGS.BUTTONS.CREATE_LOT.CANCEL, 'actionStopLot')
      ])
    }).then(nctx => {
      ctx.session.lot.lastMessage.bot = nctx.message_id;
    })
  }
  catch (e) {
    console.log('Failed to reply to the message')
    console.log(e)
    await ctx.replyWithHTML(`–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞ –∑–∞–ø–∏—Å–∞–ª, —Å–ø–∞—Å–∏–±–æ! –ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ. –ú–æ–∂–Ω–æ —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –±—É–¥–µ—Ç\n\n<b>–≠—Ç–∞–ø:</b> ‚úçÔ∏è –æ–ø–∏—Å–∞–Ω–∏–µ`, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        Markup.button.callback(SETTINGS.BUTTONS.CREATE_LOT.CANCEL, 'actionStopLot')
      ])
    }).then(nctx => {
      ctx.session.lot.lastMessage.bot = nctx.message_id;
    })
  }
});

lotSceneLinkStage.on('text', async (ctx) => {
  ctx.session.lot.link = ctx.message.text;
  ctx.session.lot.lastMessage.user = ctx.message.message_id;
  try {
    if (ctx.session.lot.lastMessage.bot) await ctx.deleteMessage(ctx.session.lot.lastMessage.bot);
  }
  catch (e) {
    console.log(e)
  }
  return ctx.scene.enter('LOT_SCENE_AUTHOR_STAGE');
});

lotSceneLinkStage.action('actionStopLot', async (ctx) => {
  util.log(ctx)
  if (ctx.session.lot) {
    await ctx.replyWithHTML(`üëå`);
    try {
      if (ctx.session.lot.lastMessage.bot) await ctx.deleteMessage(ctx.session.lot.lastMessage.bot);
    }
    catch (e) {
      console.log(e)
    }
    ctx.session.lot = null;
    return ctx.scene.leave();
  } else {
    ctx.answerCbQuery(SETTINGS.MESSAGES.CREATE_LOT.ERRORS.NOT_CREATING_A_LOT)
  }
})

lotSceneLinkStage.leave(async (ctx) => { });

module.exports = lotSceneLinkStage;
const { Scenes, Markup } = require("telegraf");
const SETTINGS = require('../../../../settings.json');
const { splitMenu, isSuperUser } = require("../../../util");

const searchKickstarterString = new Scenes.BaseScene('SCENE_SEARCH_STRING');

searchKickstarterString.enter(async (ctx) => {
  await ctx.replyWithHTML(`–ü—Ä–∏—à–ª–∏ <b>—Å—Ç—Ä–æ–∫—É</b> –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –∏–¥—Ç–∏ –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞.\n\n<i>–ü–æ–∏—Å–∫ –∏–¥—ë—Ç –ø–æ –ø–æ–ª—è–º:\n‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ\n‚Äî –ê–≤—Ç–æ—Ä\n‚Äî –¢–µ–≥–∏ (–º–æ–∏)\n‚Äî –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç</i>`).then(nctx => {
    ctx.session.toRemove = nctx.message_id;
    ctx.session.chatID = nctx.chat.id;
  });
});

searchKickstarterString.on('text', async (ctx) => {
  const searchString = ctx.message.text.toLowerCase();
  if (ctx.message.text.length < 4) {
    await ctx.replyWithHTML(`–ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é <b>—Å—Ç—Ä–æ–∫—É</b>`).then(nctx => {
      ctx.session.toRemove = nctx.message_id;
      ctx.session.chatID = nctx.chat.id;
    });
    return;
  }

  let results = [];

  await ctx.deleteMessage(ctx.message.message_id);
  await ctx.deleteMessage(ctx.session.toRemove);

  ctx.kickstarters.list.forEach((project, id) => {
    for (const key in project) {
      if (results.indexOf(id) < 0) {
        if (typeof project[key] == 'object') {
          project[key].forEach(d => {
            if (d.toLowerCase().indexOf(searchString) > -1 && results.indexOf(id) < 0) {
              results.push(id);
            }
          })
        } else {
          if (project[key].toLowerCase().indexOf(searchString) > -1 && results.indexOf(id) < 0) {
            results.push(id);
          }
        }
      }
    }
  });

  let message = `–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∏–∫—Å—Ç–∞—Ä—Ç–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å?`;
  let menu = [
    Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å', `sendRequest`),
    Markup.button.callback('–ù–µ –Ω–∞–¥–æ', `cancel`)
  ]

  ctx.userSession.results = results;

  if (results.length > 0) {
    message = `–ù–∞–π–¥–µ–Ω–æ ${results.length} –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n`;
    menu = [];
    results.forEach((ksID, id) => {
      message += `${id + 1}. ${ctx.kickstarters.list[ksID].creator} - ${ctx.kickstarters.list[ksID].name}\n`
      menu.push(Markup.button.callback(id + 1, `showKickstarter_${id}`))
    })

    message += `\n–ö–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –≤—ã–≤–µ—Å—Ç–∏?`
  }

  let bottomButtonAction = isSuperUser(ctx.message.from.id) ? 'adminKickstarters' : 'userKickstarters';

  menu = splitMenu(menu, 6);

  ctx.replyWithHTML(message, {
    ...Markup.inlineKeyboard([
      ...menu,
      [
        Markup.button.callback('‚Üê', bottomButtonAction),
        Markup.button.callback('üîç', 'searchKickstarter')
      ]
    ])
  })

  ctx.scene.leave();

});

module.exports = searchKickstarterString;
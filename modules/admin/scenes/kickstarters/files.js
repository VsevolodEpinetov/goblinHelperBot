const { Scenes, Markup } = require("telegraf");

const currentStageName = 'ADMIN_SCENE_ADD_KICKSTARTER_FILES'

const adminAddKickstarterFiles = new Scenes.BaseScene(currentStageName);

adminAddKickstarterFiles.enter(async (ctx) => {
  await ctx.telegram.editMessageText(ctx.session.chatID, ctx.session.toEdit, undefined, `–ü—Ä–∏—à–ª–∏ <b>—Ñ–∞–π–ª—ã</b> –ø—Ä–æ–µ–∫—Ç–∞`, {
    parse_mode: "HTML"
  });
});

adminAddKickstarterFiles.on('document', async (ctx) => {
  ctx.session.kickstarter.files.push(ctx.message.document.file_id);

  await ctx.deleteMessage(ctx.message.message_id);

  await ctx.telegram.editMessageText(ctx.session.chatID, ctx.session.toEdit, undefined, `–ü—Ä–∏—à–ª–∏ <b>—Ñ–∞–π–ª—ã</b> –ø—Ä–æ–µ–∫—Ç–∞\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: ${ctx.session.kickstarter.files.length}`, {
    parse_mode: "HTML",
    ...Markup.inlineKeyboard([
      Markup.button.callback('–ì–æ—Ç–æ–≤–æ', 'finished')
    ])
  });
});

adminAddKickstarterFiles.action('finished', async (ctx) => {
  ctx.scene.leave();
});

adminAddKickstarterFiles.leave(async (ctx) => {
  if (!ctx.kickstarters.list) ctx.kickstarters.list = [];
  const kstID = ctx.kickstarters.list.length
  ctx.kickstarters.list.push(ctx.session.kickstarter);
  ctx.session.kickstarter = null;
  ctx.telegram.editMessageText(ctx.session.chatID, ctx.session.toEdit, undefined, `‚úÖ –ö–∏–∫—Å—Ç–∞—Ä—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID ${kstID}.\n–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤–Ω–µ—Å–µ–Ω–æ: ${ctx.kickstarters.list.length}`, {
    parse_mode: "HTML",
    ...Markup.inlineKeyboard([
      [
        Markup.button.callback('+', 'adminAddKickstarter'),
        Markup.button.callback('üîç', 'searchKickstarter'),
        Markup.button.callback('‚úèÔ∏è', 'adminEditKickstarter')
      ],
      [
        Markup.button.callback('‚Üê', 'adminMenu')
      ]
    ])
  })
});

module.exports = adminAddKickstarterFiles;
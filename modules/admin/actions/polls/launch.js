const { Composer, Markup } = require("telegraf");
const util = require('../../../util');
const SETTINGS = require('../../../../settings.json');

module.exports = Composer.action('adminPollsStart', async (ctx) => {
  if (!ctx.settings.chats.polls) {
    await ctx.editMessageText(`‚ùå –ù–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ - –Ω–µ—Ç —á–∞—Ç–∞.\n\n–°—Ç—É–¥–∏–π –≤ —è–¥—Ä–µ: ${ctx.polls.core.length}\n–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–∏–π: ${ctx.polls.studios.length}`, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback('–Ø–¥—Ä–æ', 'adminPollsCore'),
          Markup.button.callback('–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ', 'adminPollsStudios'),
        ],
        [
          Markup.button.callback('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å', 'adminPollsStart'),
          Markup.button.callback('üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å', 'adminPollsCount')
        ],
        [
          Markup.button.callback('‚Üê', 'adminMenu')
        ]
      ])
    })
    return;
  }

  const studios = ctx.polls.core.concat(ctx.polls.studios);
  studios.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
  const maxOptionsPerPoll = 9;
  let options = [[]];

  studios.forEach((studio, index) => {
    const currentPoll = options[options.length - 1];
    currentPoll.push(studio);

    if (currentPoll.length === maxOptionsPerPoll) {
      currentPoll.push('–ü—É—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç');
      options.push([]);
    }
  });

  // Ensure the last poll ends with '–ü—É—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'
  const lastPoll = options[options.length - 1];
  if (lastPoll.length > 0 && lastPoll[lastPoll.length - 1] !== '–ü—É—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç') {
    lastPoll.push('–ü—É—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç');
  }

  // Send polls
  for (let i = 0; i < options.length; i++) {
    if (options[i].length > 0) { // Skip empty options
      await ctx.telegram.sendPoll(
        ctx.settings.chats.polls.id,
        `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –ß–∞—Å—Ç—å ${i + 1}`,
        options[i],
        {
          is_anonymous: false,
          allows_multiple_answers: true,
          message_thread_id: ctx.settings.chats.polls.thread_id
        }
      );
    }
  }

  await ctx.editMessageText(`‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ\n\n–°—Ç—É–¥–∏–π –≤ —è–¥—Ä–µ: ${ctx.polls.core.length}\n–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–∏–π: ${ctx.polls.studios.length}`, {
    parse_mode: 'HTML',
    ...Markup.inlineKeyboard([
      [
        Markup.button.callback('–Ø–¥—Ä–æ', 'adminPollsCore'),
        Markup.button.callback('–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ', 'adminPollsStudios'),
      ],
      [
        Markup.button.callback('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å', 'adminPollsStart'),
        Markup.button.callback('üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å', 'adminPollsCount')
      ],
      [
        Markup.button.callback('‚Üê', 'adminMenu')
      ]
    ])
  })
});
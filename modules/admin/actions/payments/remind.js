const { Composer, Markup } = require("telegraf");
const util = require('../../../util');
const SETTINGS = require('../../../../settings.json');

module.exports = Composer.action('adminRemind', async (ctx) => {
  const currentYear = ctx.globalSession.current.year, currentMonth = ctx.globalSession.current.month;
  const current = `${currentYear}_${currentMonth}`
  let counter = 0, failed = 0;
  let usernames = [], failedUsernames = [];

  for (const userId in ctx.users.list) {
    //ctx.users.list[userId].purchases.groups[type].push(`${year}_${month}`);
    const userData = ctx.users.list[userId];
    const isPurchased = userData.purchases.groups.regular.includes(current) || userData.roles.includes('admin') || userData.roles.includes('adminPlus');
    if (!isPurchased) {
      if (userData.roles.includes('goblin') && !userData.roles.includes('rejected')) {
        try {
          await ctx.telegram.sendMessage(userData.id, `–ü—Ä–∏—à–ª–∞ –ø–æ—Ä–∞ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ ${currentYear}-${currentMonth}!`, {
            ...Markup.inlineKeyboard([
              Markup.button.callback('–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ üíÅ‚Äç‚ôÇÔ∏è', `sendPayment_currentMonth`)
            ])
          })
          usernames.push(userData.username !== 'not_set' ? userData.username : `${userData.first_name} ${userData.last_name}`)
          counter++;
        } catch (e) {
          failedUsernames.push(userData.username !== 'not_set' ? userData.username : `${userData.first_name} ${userData.last_name}`)
          failed++;
        }
      }
    }
  }

  await ctx.editMessageText(`üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏</b>\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${counter}\n–° –æ—à–∏–±–∫–æ–π:${failed}\n\n<u>–ù–∞–ø–æ–º–Ω–∏–ª:</u>\n${usernames.join('\n')}\n\n<u>–•–æ—Ç–µ–ª, –Ω–æ –Ω–µ —Å–º–æ–≥:</u>\n${failedUsernames.join('\n')}`, {
    parse_mode: 'HTML',
    ...Markup.inlineKeyboard([
      [
        Markup.button.callback('–ú–µ—Å—è—Ü—ã', 'adminMonths'),
        Markup.button.callback('üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å', 'adminRemind')
      ],
      [
        Markup.button.callback('–ö–∏–∫—Å—Ç–∞—Ä—Ç–µ—Ä—ã', 'adminKickstarters'),
        Markup.button.callback('–†–µ–ª–∏–∑—ã', 'adminReleases')
      ],
      [
        Markup.button.callback('–õ—é–¥–∏', 'adminParticipants'),
        Markup.button.callback('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è', 'adminPolls'),
      ]
    ])
  })
});